#[cfg(test)]
use kaolinite::{
    utils::*,
    row::*,
    document::*,
    event::*,
    st,
};
use unicode_width::{UnicodeWidthChar, UnicodeWidthStr};

#[test]
fn test_width() {
    assert_eq!(st!("a").width(), 1);
    assert_eq!(st!("å¥½").width(), 2);
    assert_eq!(st!("å¥½aå¥½").width(), 5);
    assert_eq!(st!("ð’Œ§").width(), 1);
    assert_eq!(st!('a').width(), 1);
    assert_eq!('å¥½'.width().unwrap_or(0), 2);
    assert_eq!('ð’Œ§'.width().unwrap_or(0), 1);
}

#[test]
fn test_line_splitter() {
    assert_eq!(
        LINE_ENDING_SPLITTER.split("hello\nthere\n").collect::<Vec<_>>(),
        vec![st!("hello"), st!("there"), st!("")],
    );
    assert_eq!(
        LINE_ENDING_SPLITTER.split("hello\r\nthere\r\n").collect::<Vec<_>>(),
        vec![st!("hello"), st!("there"), st!("")],
    );
    assert_eq!(
        LINE_ENDING_SPLITTER.split("hello\r\nthere\naå¥½a").collect::<Vec<_>>(),
        vec![st!("hello"), st!("there"), st!("aå¥½a")],
    );
}

#[test]
fn test_row() {
    let mut row = Row::new("aaå¥½bå¥½c");
    assert_eq!(row.text, vec!['a', 'a', 'å¥½', 'b', 'å¥½', 'c']);
    assert_eq!(row.widths, vec![1, 1, 2, 1, 2, 1]);
    row.insert(3, "hao").unwrap();
    row.insert(2, "ni").unwrap();
    assert_eq!(row.render_full(), "aaniå¥½haobå¥½c");
    row.remove(3..7).unwrap();
    assert_eq!(row.render_full(), "aanobå¥½c");
    assert_eq!(row.render(5..), "å¥½c");
    assert_eq!(row.render(6..), " c");
    assert_eq!(row.render(7..), "c");
    let row = Row::new("The quick brown fox jumped over the lazy dog!");
    assert_eq!(row.words(), vec![0, 4, 10, 16, 20, 27, 32, 36, 41]);
}

#[test]
fn test_document() {
    let doc = Document::open("examples/test.txt", (10, 10)).expect("File not found");
    assert_eq!(doc.rows, vec![Row { text: vec![], widths: vec![], modified: false }]);
    let mut doc = Document::open("examples/test2.txt", (10, 10)).expect("File not found");
    assert_eq!(doc.rows, vec![
        Row::new("My"), 
        Row::new("newå¥½"), 
        Row::new("document"), 
        Row::new("å¥½"),
        Row::new(""),
    ]);
    doc.row_mut(0).unwrap().insert(1, ",").unwrap();
    doc.row_mut(0).unwrap().remove(2..3).unwrap();
    assert_eq!(doc.rows, vec![
        Row { text: vec!['M', ','], widths: vec![1, 1], modified: true },
        Row::new("newå¥½"), 
        Row::new("document"), 
        Row::new("å¥½"),
        Row::new(""),
    ]);
    assert_eq!(doc.row(1).unwrap(), &Row::new("newå¥½"));
    doc.cursor.y = 1;
    assert_eq!(doc.current_row().unwrap(), &Row::new("newå¥½"));
    assert_eq!(doc.current_row().unwrap().len(), 4);
    assert_eq!(doc.current_row().unwrap().width(), 5);
}

#[test]
fn test_movement() {
    let mut doc = Document::open("examples/test3.txt", (10, 3)).expect("File not found");
    doc.cursor.y = 2;
    // Move left
    doc.cursor.x = 2;
    doc.offset.x = 3;
    assert_eq!(doc.move_left().unwrap(), Status::None);
    assert_eq!(doc.cursor.x, 1);
    assert_eq!(doc.offset.x, 3);
    assert_eq!(doc.move_left().unwrap(), Status::None);
    assert_eq!(doc.cursor.x, 0);
    assert_eq!(doc.offset.x, 3);
    assert_eq!(doc.move_left().unwrap(), Status::None);
    assert_eq!(doc.cursor.x, 0);
    assert_eq!(doc.offset.x, 2);
    assert_eq!(doc.move_left().unwrap(), Status::None);
    assert_eq!(doc.cursor.x, 0);
    assert_eq!(doc.offset.x, 1);
    assert_eq!(doc.move_left().unwrap(), Status::None);
    assert_eq!(doc.cursor.x, 0);
    assert_eq!(doc.offset.x, 0);
    assert_eq!(doc.move_left().unwrap(), Status::StartOfRow);
    assert_eq!(doc.cursor.x, 0);
    assert_eq!(doc.offset.x, 0);
    doc.cursor.x = 5;
    doc.offset.x = 2;
    assert_eq!(doc.move_left().unwrap(), Status::None);
    assert_eq!(doc.cursor.x, 4);
    assert_eq!(doc.offset.x, 2);
    // Move right
    doc.cursor.x = 8;
    doc.offset.x = 3;
    assert_eq!(doc.move_right().unwrap(), Status::None);
    assert_eq!(doc.cursor.x, 9);
    assert_eq!(doc.offset.x, 3);
    assert_eq!(doc.move_right().unwrap(), Status::None);
    assert_eq!(doc.cursor.x, 9);
    assert_eq!(doc.offset.x, 4);
    assert_eq!(doc.move_right().unwrap(), Status::None);
    assert_eq!(doc.cursor.x, 9);
    assert_eq!(doc.offset.x, 5);
    assert_eq!(doc.move_right().unwrap(), Status::EndOfRow);
    doc.cursor.x = 5;
    doc.offset.x = 2;
    assert_eq!(doc.move_right().unwrap(), Status::None);
    assert_eq!(doc.cursor.x, 6);
    assert_eq!(doc.offset.x, 2);
    // Move up
    doc.cursor.y = 3;
    doc.offset.y = 3;
    assert_eq!(doc.move_up().unwrap(), Status::None);
    assert_eq!(doc.cursor.y, 2);
    assert_eq!(doc.offset.y, 3);
    assert_eq!(doc.move_up().unwrap(), Status::None);
    assert_eq!(doc.cursor.y, 1);
    assert_eq!(doc.offset.y, 3);
    assert_eq!(doc.move_up().unwrap(), Status::None);
    assert_eq!(doc.cursor.y, 0);
    assert_eq!(doc.offset.y, 3);
    assert_eq!(doc.move_up().unwrap(), Status::None);
    assert_eq!(doc.cursor.y, 0);
    assert_eq!(doc.offset.y, 2);
    assert_eq!(doc.move_up().unwrap(), Status::None);
    assert_eq!(doc.cursor.y, 0);
    assert_eq!(doc.offset.y, 3);
}
